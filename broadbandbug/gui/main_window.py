""" Defines the structure of the GUI for the main window and related dialogs. Most of this was generated by ChatGPT. """
import tkinter as tk
from tkinter import ttk, messagebox
from tkcalendar import DateEntry

from broadbandbug.library.classes import BaseRecorder
from broadbandbug.library.constants import RecordingMethod


class MainWindow:
    def __init__(self, make_graph_function):
        self.make_graph = make_graph_function
        self.recorders = {}
        self.recorders: dict[BaseRecorder]

        # Create the main window
        self.root = tk.Tk()
        self.root.title("Recorder and Graph GUI")
        self.root.geometry("400x300")
        self.center_window(self.root)

        # Create a style object
        style = ttk.Style()

        # Check the current theme and set a new one if necessary
        current_theme = style.theme_use()
        if current_theme == 'clam':
            style.theme_use('default')

        # Configure the style for the tab labels
        style.configure('TNotebook.Tab', foreground='white', background='gray')
        style.map('TNotebook.Tab',
                  foreground=[('selected', 'black'), ('!selected', 'white')],
                  background=[('selected', 'lightgray'), ('!selected', 'gray')])

        # Create a notebook (tab container)
        notebook = ttk.Notebook(self.root)
        notebook.pack(expand=1, fill="both")

        # Create the "Recorders" tab
        frame_recorders = ttk.Frame(notebook)
        notebook.add(frame_recorders, text="Recorders")

        # Create a listbox in the "Recorders" tab
        self.listbox = tk.Listbox(frame_recorders, height=10)
        self.listbox.pack(padx=10, pady=10, fill="both", expand=True)

        # Create buttons to add and remove recorders
        button_add = tk.Button(frame_recorders, text="Add recorder", command=self.add_recorder_dialog)
        button_add.pack(side=tk.LEFT, padx=10, pady=10)

        button_remove = tk.Button(frame_recorders, text="Remove recorder", command=self.remove_recorder)
        button_remove.pack(side=tk.RIGHT, padx=10, pady=10)

        # Create the "Graph" tab
        frame_graph = ttk.Frame(notebook)
        notebook.add(frame_graph, text="Graph")

        # Create a checkbox in the "Graph" tab
        self.group_by_var = tk.BooleanVar()
        checkbox_group = tk.Checkbutton(frame_graph, text="Group by recorder", variable=self.group_by_var)
        checkbox_group.pack(padx=10, pady=10)

        # Create date selectors for start and end dates
        frame_dates = tk.Frame(frame_graph)
        frame_dates.pack(padx=10, pady=5)

        label_start_date = tk.Label(frame_dates, text="Start date:")
        label_start_date.grid(row=0, column=0, padx=5, pady=5)
        self.start_date_entry = DateEntry(frame_dates, width=12, background='darkblue', foreground='black', borderwidth=2)
        self.start_date_entry.grid(row=0, column=1, padx=5, pady=5)

        label_end_date = tk.Label(frame_dates, text="End date:")
        label_end_date.grid(row=1, column=0, padx=5, pady=5)
        self.end_date_entry = DateEntry(frame_dates, width=12, background='darkblue', foreground='black', borderwidth=2)
        self.end_date_entry.grid(row=1, column=1, padx=5, pady=5)

        # Create a button to open the graph
        button_open_graph = tk.Button(frame_graph, text="Open graph", command=self.open_graph)
        button_open_graph.pack(padx=10, pady=10)

    # Function to add a recorder to the listbox
    def add_recorder_dialog(self):
        def on_add():
            recorder_name = entry_name.get().strip()
            recording_method = combo_method.get()

            if not recorder_name:
                messagebox.showwarning("Input Error", "Recorder name cannot be empty.")
                return

            if recorder_name in [self.listbox.get(i) for i in range(self.listbox.size())]:
                messagebox.showwarning("Input Error", "Recorder name must be unique.")
                return

            if not recording_method:
                messagebox.showwarning("Input Error", "Please select a recording method.")
                return

            # Create new recorder
            new_rec = None
            # TODO convert method value to new recorder (use dict or something)
            #self.recorders[recorder_name] = new_rec()

            self.listbox.insert(tk.END, f"{recorder_name}")
            dialog.destroy()

        # Create a new dialog window
        dialog = tk.Toplevel(self.root)
        dialog.title("Add Recorder")
        dialog.geometry("350x150")

        frame_dialog = tk.Frame(dialog)
        frame_dialog.pack(pady=10, padx=10, fill="both", expand=True)

        tk.Label(frame_dialog, text="Recorder Name:").grid(row=0, column=0, padx=5, pady=5, sticky=tk.W)
        entry_name = tk.Entry(frame_dialog)
        entry_name.grid(row=0, column=1, padx=5, pady=5, sticky=tk.EW)

        tk.Label(frame_dialog, text="Recording Method:").grid(row=1, column=0, padx=5, pady=5, sticky=tk.W)
        combo_method = ttk.Combobox(frame_dialog, values=[method.value for method in RecordingMethod])
        combo_method.grid(row=1, column=1, padx=5, pady=5, sticky=tk.EW)

        frame_buttons = tk.Frame(dialog)
        frame_buttons.pack(pady=10)

        tk.Button(frame_buttons, text="Add", command=on_add).pack(side=tk.LEFT, padx=5)
        tk.Button(frame_buttons, text="Cancel", command=dialog.destroy).pack(side=tk.LEFT, padx=5)

        # Make the columns in frame_dialog expand proportionally
        frame_dialog.columnconfigure(0, weight=1)
        frame_dialog.columnconfigure(1, weight=3)

        # Center the dialog window
        self.center_window(dialog)

    # Function to remove the selected recorder from the listbox
    def remove_recorder(self):
        selected_indices = self.listbox.curselection()
        if selected_indices:
            for index in reversed(selected_indices):
                self.listbox.delete(index)
        else:
            messagebox.showwarning("No selection", "Please select a recorder to remove.")

    # Function to open the graph
    def open_graph(self):
        """ Opens a graph that matches the constraints specified in the GUI. The make_graph function handles most of the graph
         preparation, to delegate most of it to a different file. """
        group_by_recorder = self.group_by_var.get()
        start_date = self.start_date_entry.get_date()
        end_date = self.end_date_entry.get_date()
        graph = self.make_graph(group_by_recorder, start_date, end_date)
        graph.open()

    # Function to center the window
    @staticmethod
    def center_window(window):
        window.update_idletasks()
        width = window.winfo_width()
        height = window.winfo_height()
        x = (window.winfo_screenwidth() // 2) - (width // 2)
        y = (window.winfo_screenheight() // 2) - (height // 2)
        window.geometry(f'{width}x{height}+{x}+{y}')


if __name__ == '__main__':
    # Run the main event loop
    MainWindow(None).root.mainloop()
